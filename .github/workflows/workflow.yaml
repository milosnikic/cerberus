name: Cerberus API Build workflow

on:
  push:

permissions:
  contents: read

jobs:
  health-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Load cached Poetry
        uses: actions/cache@v2
        id: cached-poetry
        with:
          path: ~/.local
          key: dotlocal-${{ runner.os }}-${{ hashFiles('**/workflow.yaml') }}
      - name: Install Poetry
        uses: snok/install-poetry@v1
        if: steps.cached-poetry.outputs.cache-hit != 'true'
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Load cached venv for Poetry dependencies
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: api/.venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        working-directory: api
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction

      - name: Lint with pylint
        working-directory: api
        run: poetry run pylint . --recursive=y
      - name: Format with black
        working-directory: api
        run: poetry run black . --check
      - name: Sort with isort
        working-directory: api
        run: poetry run isort . -c
      - name: MyPy static type check
        working-directory: api
        run: poetry run mypy . --install-types --non-interactive
  test:
    runs-on: ubuntu-latest
    needs: [health-check]
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USERNAME: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Load cached Poetry
        uses: actions/cache@v2
        with:
          path: ~/.local
          key: dotlocal-${{ runner.os }}-${{ hashFiles('**/workflow.yaml') }}
      - name: Load cached venv for Poetry dependencies
        uses: actions/cache@v2
        with:
          path: api/.venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Run unit tests
        working-directory: api
        run: poetry run python manage.py test
  build:
    if: ${{ github.ref_name == 'main' }}
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Docker build and push
        uses: docker/build-push-action@v3
        with:
          push: true
          context: "{{defaultContext}}:api"
          file: deployments/drf-project/Dockerfile
          build-args: ENV=production
          tags: ${{ secrets.DOCKER_HUB_API_IMAGE_LOCATION }}:latest
